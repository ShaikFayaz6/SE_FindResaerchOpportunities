<!DOCTYPE html>
<!---Coding By CodingLab | www.codinglabweb.com--->
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <!--<title>Registration Form in HTML CSS</title>-->
    <!---Custom CSS File--->
    <title>Research Finder</title>

    <link rel="stylesheet" href="style.css" />
  </head>

  <style>
    /* Import Google font - Poppins */
@import url("https://fonts.googleapis.com/css2?family=Poppins:wght@200;300;400;500;600;700&display=swap");
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: "Poppins", sans-serif;
}

.light-theme {
    --sidebar-background: #005f99;
    --logo-detailscolor: #ffffff;
    --navlinks-i: #ffffff; 
    --linkname-color: #ffffff;
    --submenu-a: #ffffff;
    --theme-main: #ffffff;
    --profile-details: #004080;
    --theme-color: #4a90e2;
    --border-color: #4a90e2;
    --background-hover: #5bb3e6;
    --home-background: #e3eff8;
    --option-text: #004080;
    --container-background: #f5f9fc;
    --product-text: #4e4e4e;
    --product-shadow: 0px 0px 20px 13px #a0b3d6;
    --container-shadow: 7px 9px 16px 0px #a0b3d6;
    --home-header-bg: #cfebff;
    --text-area-input: #f5f9fc;
}

.dark-theme {
    --sidebar-background: #181825;          /* Dark navy, slightly desaturated for a softer look */
    --logo-detailscolor: #599bdc;           /* Muted blue to give a softer contrast */
    --navlinks-i: #d1d5db;                  /* Light gray for easier readability */
    --linkname-color: #c9ced7;              /* Light gray for link text */
    --submenu-a: #d0d7e5;                   /* Softer gray for submenu items */
    --theme-main: #0f0f14;                  /* Deep dark blue */
    --profile-details: #1d2437;             /* Darker blue for profile background */
    --theme-color: #5aa7e5;                 /* Brighter blue for primary accents */
    --border-color: #445a7a;                /* Muted blue-gray for borders */
    --background-hover: #3a9be6;            /* Lighter shade of blue for hover states */
    --home-background: #191925;             /* Slightly lighter than main background */
    --option-text: #5ba9f2;                 /* Vibrant blue for selectable options */
    --container-background: #232336;        /* Dark gray with a hint of blue */
    --product-text: #f1f1f1;                /* Near-white for readability */
    --product-shadow: 0px 0px 15px 8px #020212; /* Softer shadow for products */
    --container-shadow: 5px 7px 14px 0px #020212; /* Slightly softened shadow */
    --home-header-bg: #13131e;              /* Dark gray-blue for header background */
    --text-area-input: #1d1d2b;             /* Darker gray-blue for text input */
}


body {
  min-height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 20px;
  background: var(--home-background);
}
.container {
  position: relative;
  max-width: 700px;
  width: 100%;
  background: var(--container-background);
  padding: 25px;
  border-radius: 8px;
  box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
}
.container header {
  font-size: 1.5rem;
  color: var(--product-text);
  font-weight: 500;
  text-align: center;
}
.container .form {
  margin-top: 30px;
}
.form .input-box {
  width: 100%;
  margin-top: 20px;
}
.input-box label {
  color: var(--product-text);
}
.form :where(.input-box input, .select-box) {
  position: relative;
  height: 50px;
  width: 100%;
  outline: none;
  font-size: 1rem;
  color: var(--product-text);
  margin-top: 8px;
  border: 1px solid #ddd;
  border-radius: 6px;
  padding: 0 15px;
  background: var(--text-area-input);
  border-color: var(--border-color);
}
.input-box input:focus {
  box-shadow: 0 1px 0 rgba(0, 0, 0, 0.1);
}
.form .column {
  display: flex;
  column-gap: 15px;
}
.form .gender-box {
  margin-top: 20px;
}
.gender-box h3 {
  color: var(--product-text);
  font-size: 1rem;
  font-weight: 400;
  margin-bottom: 8px;
}
.form :where(.gender-option, .gender) {
  display: flex;
  align-items: center;
  column-gap: 50px;
  flex-wrap: wrap;
}
.form .gender {
  column-gap: 5px;
}
.gender input {
  accent-color: rgb(130, 106, 251);
}
.form :where(.gender input, .gender label) {
  cursor: pointer;
}
.gender label {
  color: #707070;
}
.address :where(input, .select-box) {
  margin-top: 15px;
}
.select-box select {
  height: 100%;
  width: 100%;
  outline: none;
  border: none;
  color: #707070;
  font-size: 1rem;
}
.form button {
  height: 55px;
  width: 100%;
  color: #151515;
  font-size: 1rem;
  font-weight: 400;
  margin-top: 30px;
  border: none;
  cursor: pointer;
  transition: all 0.2s ease;
  background: var(--theme-color);
}
.form button:hover {
  background: var(--background-hover);
}


.in-containers {
  display: flex;
  justify-content: space-between;
  gap: 20px;
  margin-top: 20px;
  padding: 10px;
}

/* width */
::-webkit-scrollbar {
  width: 6px;
}
/* Track */
::-webkit-scrollbar-track {
  background: #f2f2f2;
}
/* Handle */
::-webkit-scrollbar-thumb {
  border-radius: 8px;
  background: #ccc;
}
/* Handle on hover */
::-webkit-scrollbar-thumb:hover {
  background: #aaa;
}

.interests-container {
  position: relative;
    max-width: 480px;
    width: 100%;
    border-radius: 8px;
    padding: 25px;
    margin: -90px auto 0;
    background-color: var(--container-background);
    box-shadow: 0 5px 10px rgba(0, 0, 0, 0.1);
}
.interests-container .input-field {
  position: relative;
  height: 64px;
  width: 100%;
}

.interests-container h2 {
  font-size: 1.5rem;
  color: var(--product-text);
  font-weight: 500;
  text-align: center;
}

.input-field textarea {
  height: 100%;
  width: 100%;
  outline: none;
  font-size: 18px;
  font-weight: 400;
  border-radius: 8px;
  padding: 18px 45px 18px 15px;
  border: 1px solid #ccc;
  resize: none;
  background: var(--text-area-input);
  border-color: var(--border-color);
  color: var(--product-text);
}
.input-field textarea:focus {
  border-color: var(--theme-color);
}
textarea::-webkit-scrollbar {
  display: none;
}
.input-field .note-icon {
  position: absolute;
  top: 50%;
  right: 15px;
  transform: translateY(-50%);
  pointer-events: none;
  font-size: 24px;
  color: #707070;
}
.input-field textarea:focus ~ .note-icon {
  color: var(--theme-color);
}

.interests-container .todoLists {
  max-height: 380px;
  overflow-y: auto;
  padding-right: 10px;
}
.todoLists .list {
  display: flex;
  align-items: center;
  list-style: none;
  background-color: var(--border-color);
  padding: 20px 15px;
  border-radius: 8px;
  margin-top: 10px;
  position: relative;
  cursor: pointer;
}
.todoLists .list input {
  height: 16px;
  min-width: 16px;
  accent-color: var(--theme-color);
  pointer-events: none;
}
.todoLists .list .task {
  margin: 0 30px 0 15px;
  word-break: break-all;
}

.todoLists .list i {
  position: absolute;
  top: 50%;
  right: 15px;
  transform: translateY(-50%);
  font-size: 20px;
  color: #707070;
  padding: 5px;
  opacity: 0.6;
  display: none;
}
.todoLists .list:hover i {
  display: inline-flex;
}
.todoLists .list i:hover {
  opacity: 1;
}
.interests-container .pending-tasks {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-top: 25px;
}
.pending-tasks span {
  color: var(--product-text);
}
.pending-tasks .clear-button {
  padding: 6px 12px;
  outline: none;
  border: none;
  background: var(--theme-color);
  color: #000000;
  font-size: 14px;
  border-radius: 4px;
  cursor: pointer;
  pointer-events: none;
  white-space: nowrap;
}
.clear-button:hover {
  background-color: var(--background-hover);
}

.post-button {
  position: absolute;
  bottom: -35px;
  left: 76%;
  transform: translateX(-50%);
  padding: 12px 24px;
  outline: none;
  border: none;
  background: var(--theme-color);
  color: #000000;
  font-size: 16px;
  border-radius: 4px;
  cursor: pointer;
}
.post-button:disabled {
  background: var(--theme-color);
  cursor: not-allowed;
}

.post-button:hover {
  background-color: var(--background-hover);
}


/*Responsive*/
@media screen and (max-width: 500px) {
  .form .column {
    flex-wrap: wrap;
  }
  .form :where(.gender-option, .gender) {
    row-gap: 15px;
  }
}

#startVoiceNav {
  display: hidden;
}
  </style>

  <body>
    <i class='bx bxs-user-voice' id="startVoiceNav"></i>

    <section class="container">
      <header data-translate="true" >Profile Details</header>
      <form action="/edit-pdetails" method="post" class="form">
        <div class="input-box">
          <label data-translate="true" >Full Name</label>
          <div class="column">
            <input aria-label="first name" data-translate="true"  type="text" placeholder="Enter first name" name="firstName" value="<%= firstName %>" />
            <input aria-label="last name" data-translate="true"  type="text" placeholder="Enter surname" name="surName" value="<%= surname %>" />
          </div>
        </div>

        <!-- <div class="input-box">
          <label>Email Address</label>
          <input type="text" placeholder="Enter email address" required />
        </div> -->

        <!-- <div class="column"> -->
          <div class="input-box">
            <label data-translate="true" >Phone Number</label>
            <input aria-label="phone number" data-translate="true" type="number" placeholder="Enter phone number" name="phone" value="<%= mobileNumber %>" />
          </div>
          <!-- <div class="input-box">
            <label>Birth Date</label>
            <input type="date" placeholder="Enter birth date" required />
          </div> -->
        <!-- </div> -->
        <!-- <div class="gender-box">
          <h3>Gender</h3>
          <div class="gender-option">
            <div class="gender">
              <input type="radio" id="check-male" name="gender" checked />
              <label for="check-male">male</label>
            </div>
            <div class="gender">
              <input type="radio" id="check-female" name="gender" />
              <label for="check-female">Female</label>
            </div>
            <div class="gender">
              <input type="radio" id="check-other" name="gender" />
              <label for="check-other">prefer not to say</label>
            </div>
          </div>
        </div> -->
        <div class="input-box address">
          <label data-translate="true" >Address</label>
          <input aria-label="address line 1" data-translate="true" type="text" placeholder="Enter street address" name="address1" value="<%= addressLine1 %>" />
          <input aria-label="address line 2" data-translate="true" type="text" placeholder="Enter street address line 2" name="address2" value="<%= addressLine2 %>" />
          <!-- <div class="column">
            <div class="select-box">
              <select>
                <option hidden>Country</option>
                <option>America</option>
                <option>Japan</option>
                <option>India</option>
                <option>Nepal</option>
              </select>
            </div>
            <input type="text" placeholder="Enter your city" required />
          </div> -->
          <div class="column">
            <input aria-label="country" data-translate="true"  type="text" placeholder="Enter your Country" name="country" value="<%= country %>" />
            <input aria-label="state" data-translate="true"  type="text" placeholder="Enter state" name="state" value="<%= state %>" />
          </div>
          <div class="column">
            <input aria-label="region" data-translate="true" type="text" placeholder="Enter your Region" name="region" value="<%= stateRegion %>" />
            <input aria-label="postal code" data-translate="true" type="number" placeholder="Enter postal code" name="postcode" value="<%= postcode %>" />
          </div>
        </div>

        <div class="input-box">
          <label data-translate="true" >Education</label>
          <input aria-label="education" data-translate="true" type="text" placeholder="eg: bachelors, masters etc.." name="education" value="<%= education %>" />
        </div>
        <button  data-translate="true" type="submit">Submit</button>
      </form>




    </section>

    <div class="in-containers">
      <div class="interests-container">
        <h2 data-translate="true" >Interests</h2>
        <div class="input-field">
          <textarea aria-label="enter your interests" data-translate="true" placeholder="Enter your new interest"></textarea>
          <i class="uil uil-notes note-icon"></i>
        </div>
    
        <ul class="todoLists interests-list"></ul>
    
        <div class="pending-tasks">
          <span data-translate="true" >You have <span class="pending-num interests-num">0</span> interests.</span>
          <button data-translate="true" class="clear-button interests-clear">Clear Interests</button>
        </div>
      </div>

          <!-- Skills Container -->
      <div class="interests-container">
        <h2 data-translate="true" >Skills</h2>
        <div class="input-field">
          <textarea aria-label="ENter your skill" data-translate="true" placeholder="Enter your new skill"></textarea>
          <i class="uil uil-notes note-icon"></i>
        </div>
    
        <ul class="todoLists skills-list"></ul>
    
        <div class="pending-tasks">
          <span data-translate="true" >You have <span class="pending-num skills-num">0</span> skills.</span>
          <button  data-translate="true" class="clear-button skills-clear">Clear Skills</button>
        </div>
      </div>
    </div>

    <form id="interests-skills-form" action="/edit-pdetails" method="POST">
      <!-- Hidden inputs to store interests and skills -->
      <input data-translate="true"  type="hidden" name="interests" id="interests-input" value="">
      <input  data-translate="true" type="hidden" name="skills" id="skills-input" value="">
      <button  data-translate="true" type="submit" class="post-button" disabled>Save Interests & Skills</button> <!-- Common submit button -->
    </form>

    <script>

      const body = document.body;

      document.addEventListener("DOMContentLoaded", () => {
        fetch('/get-theme')
          .then(response => response.json())
          .then(data => {
            const theme = data.theme;
            if (theme === 'dark-theme') {
              body.classList.add('dark-theme');
            } else {
              body.classList.add('light-theme');
            }
          })
          .catch(error => console.error('Error fetching theme:', error));
      });

      const interestsInputField = document.querySelectorAll(".interests-container")[0].querySelector(".input-field textarea"),
        skillsInputField = document.querySelectorAll(".interests-container")[1].querySelector(".input-field textarea"),
        interestsList = document.querySelector(".interests-list"),
        skillsList = document.querySelector(".skills-list"),
        interestsPendingNum = document.querySelector(".interests-num"),
        skillsPendingNum = document.querySelector(".skills-num"),
        interestsClearButton = document.querySelector(".interests-clear"),
        skillsClearButton = document.querySelector(".skills-clear"),
        interestsInput = document.getElementById("interests-input"),
        skillsInput = document.getElementById("skills-input"),
        postButton = document.querySelector(".post-button"),
        interestsForm = document.getElementById("interests-skills-form");
  
      let interestsArray = JSON.parse('<%- interests %>');
      let skillsArray = JSON.parse('<%- skills %>');
    
      console.log('<%= interests %>');
      console.log(interestsArray);

      console.log(skillsArray);

      addInterestsSkills();

      function addInterestsSkills() {
        interestsArray.forEach(interest => {
          let liTag = `<li class="list pending" onclick="handleStatus(this)">
            <span data-translate="true" class="task">${interest}</span>
            <i class="uil uil-trash" onclick="deleteInterest(this)"></i>
          </li>`;
  
          interestsList.insertAdjacentHTML("beforeend", liTag);
        });
  
        skillsArray.forEach(skill => {
          let liTag = `<li class="list pending" onclick="handleStatus(this)">
            <span data-translate="true" class="task">${skill}</span>
            <i class="uil uil-trash" onclick="deleteSkill(this)"></i>
          </li>`;
  
          skillsList.insertAdjacentHTML("beforeend", liTag);
        });
  
        updateAllTasks();
      }
  
      // Function to update task count andf enable/disable button
      function updateAllTasks() {
        interestsPendingNum.textContent = interestsArray.length === 0 ? "no" : interestsArray.length;
        skillsPendingNum.textContent = skillsArray.length === 0 ? "no" : skillsArray.length;
  
        if (interestsArray.length > 0) {
          interestsList.style.marginTop = "20px";
          interestsClearButton.style.pointerEvents = "auto";
        } else {
          interestsList.style.marginTop = "0px";
          interestsClearButton.style.pointerEvents = "none";
        }

        if (skillsArray.length > 0) {
          skillsList.style.marginTop = "20px";
          skillsClearButton.style.pointerEvents = "auto";
        } else {
          skillsList.style.marginTop = "0px";
          skillsClearButton.style.pointerEvents = "none";
        } 

        if (interestsArray.length > 0 && skillsArray.length > 0) {
          postButton.disabled = false; // Enable button if either array has items
        } else {
          postButton.disabled = true; // Disable if both arrays are empty
        }
      }
  
      // Add interest on Enter key
      interestsInputField.addEventListener("keyup", (e) => {
        let inputVal = interestsInputField.value.trim();
  
        if (e.key === "Enter" && inputVal.length > 0) {
          let liTag = `<li class="list pending" onclick="handleStatus(this)">
            <span data-translate="true" class="task">${inputVal}</span>
            <i class="uil uil-trash" onclick="deleteInterest(this)"></i>
          </li>`;
  
          interestsList.insertAdjacentHTML("beforeend", liTag);
          interestsArray.push(inputVal);
          interestsInputField.value = "";
          updateAllTasks();
        }
      });
  
      // Add skill on Enter key
      skillsInputField.addEventListener("keyup", (e) => {
        let inputVal = skillsInputField.value.trim();
  
        if (e.key === "Enter" && inputVal.length > 0) {
          let liTag = `<li class="list pending" onclick="handleStatus(this)">
            <span data-translate="true" class="task">${inputVal}</span>
            <i class="uil uil-trash" onclick="deleteSkill(this)"></i>
          </li>`;
  
          skillsList.insertAdjacentHTML("beforeend", liTag);
          skillsArray.push(inputVal);
          skillsInputField.value = "";
          updateAllTasks();
        }
      });
  
      // Delete interest
      function deleteInterest(e) {
        let taskText = e.parentElement.querySelector(".task").textContent;
        interestsArray = interestsArray.filter(interest => interest !== taskText);
        e.parentElement.remove();
        updateAllTasks();
      }
  
      // Delete skill
      function deleteSkill(e) {
        let taskText = e.parentElement.querySelector(".task").textContent;
        skillsArray = skillsArray.filter(skill => skill !== taskText);
        e.parentElement.remove();
        updateAllTasks();
      }
  
      // Clear all interests
      interestsClearButton.addEventListener("click", () => {
        interestsList.innerHTML = "";
        interestsArray = [];
        updateAllTasks();
      });
  
      // Clear all skills
      skillsClearButton.addEventListener("click", () => {
        skillsList.innerHTML = "";
        skillsArray = [];
        updateAllTasks();
      });
  
      // Before submitting, add both interests and skills to hidden inputs
      interestsForm.addEventListener("submit", (e) => {
        if (interestsArray.length > 0 || skillsArray.length > 0) {
          interestsInput.value = JSON.stringify(interestsArray);
          skillsInput.value = JSON.stringify(skillsArray);
        } else {
          alert("No interests or skills to post!");
          e.preventDefault();
        }
      });
    </script>
    <script type="module" src="VoiceNavigation.mjs"></script>
    <script type="module" src="translation.mjs"></script>
    <script src="languages.js" ></script>

  </body>
</html>